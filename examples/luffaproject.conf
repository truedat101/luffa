####################################
# Sample Luffa Project Configuration
# XXX Just a thought, should these scripts just be python?   Like bitbake?
# Answer: Yes.  Bitbake rocks.  And so should this tool.
# Hmmm.  Some people don't do python, so maybe...keep this as a conf file for now.
####################################

#
# Project Setup
#
# fullname - the name of the project, used for reporting purposes
# path.uri = the path to the base of the code.  Currently this supports only one path.
# source.ext.whitelist - The list of extensions for files you want to scan.  Other files are ignored.  There is no way as of 
#								 yet to handle search on binary files.  Not sure if this makes sense for our purposes.
#								 You could potentially scan symbols in object files and strings in classfiles, but naaaah.
#								 XXX TODO Convert this to a regular expression
#								 Would be useful to ignore some .txt files, for example, but not all.
# XXX Todo: Add a directory blacklist.  While the whitelist concept is easier for what types of files
# to include, it is the opposite for directories, and can be an exaustive problem to list every dir to 
# traverse.  Would be useful to have a directory blacklist to skip certain directories completely 
# like .svn or other "book keeping" or work directories that aren't really part of a projects code.
project.fullname=Project Luffa
project.path.uri=../../../src
project.source.ext.whitelist=.py,.doc,.txt

#
# License DB
# The license db is for verifying licenses found in the code, bundle metadata
# and in any docs.  
#
# Hardcode this for now...eventually, I should serve up a web service that
# For now, it is just a taxonomy of licenses
# Format should be license.name.version=REGEXP
#license.gpl.v1=XXX TODO
#license.gpl.v2=XXX TODO
#license.gpl.v3=XXX TODO
# license.opensource = a general regex to match most major open source licenses
license.foo=foo
license.opensource=(GPL|BSD|APACHE|MOZILLA|CDDL|SCSL|PUBLIC DOMAIN|CREATIVE COMMONS|ARTISTIC|MIT LICENSE)

#
# Watchlist
# 
# Watchlist should be stuff that we want to flag in a report, typically 
# Format should be watchlist.KEY=REGEXP
# Python raw string notation will be appended to whatever you use for the regex.  I had the raw string notation here 
# originally, but had problems with the string escaping.  
#
# NOTE: Clearly, there could be a single regex to rule them all, but this is much easier to organize
# and parse the results if you split them up.  Secondly, I do not like my poor regexes below.  Please
# improve them if you see fit.  I need to add some negative lookahead assertions as well as more explicit
# matching of inidividual words vs. matching a pattern within a larger string of characters.  This causes
# a lot of false hits currently with the badwords and names. Please improve these!
#
# Descriptions:
# names - should be list of known names of team members, aliases, nicknames
# companies - any company names possibly referenced.  This is a good idea if you've acquired a company, or you think your
# 				  dev team might have lifted code from someone else inadvertantly (yikes)
# badwords - we all know what these are...don't use these words in your code unless you are creating apps for adult industry.
# 				 The concrete 5 project has a nice list of bad words.  
# emailaddresses - a * indicates search for all email addresses.  Otherwise, only search for email addresses in the list
# hostnames - a * indicates match any hostname pattern.  Otherwise, only find mentioned hostnames
# ipaddresses - a * indicates match any ipaddress pattern (v4).  Otherwise, only match the mentioned addresses.  
# XXXIPV6 needs to be done.
watchlist.names=(David|Mike|Truedat|Burt|Ernie)
watchlist.companies=(Sun|Microsystems|Microsoft|Inc\.|Incorporated|LLP|Limited|LLC|A\.G\.|SA)
watchlist.badwords=(darn|fudge|shitake|fiddlesticks|dag nabbit)
watchlist.emailaddresses=*
watchlist.hostnames=*
watchlist.ipaddresses=*

#
# Reports
#
# Format should be report.KEY1.KEY2=value
# XXX Need to implement these
report.output.text.file=luffareport.txt
report.output.stdout=TRUE
